import java.util.Scanner;

public class Main {
    public static void main(String[] args) throws InterruptedException {
        // Initialize the ParkingLotManager to manage the parking spots.
        ParkingLotManager manager = new ParkingLotManager();
        
        // Scanner to read user input.
        Scanner scanner = new Scanner(System.in);

        while (true) {
            // Display menu options.
            System.out.println("\nParking Lot Management System");
            System.out.println("1. Add Parking Spot");
            System.out.println("2. Park Vehicle");
            System.out.println("3. Remove Vehicle");
            System.out.println("4. View Available Spots");
            System.out.println("5. Calculate Parking Fee");
            System.out.println("6. Exit");
            System.out.print("Choose an option: ");
            
            int choice = scanner.nextInt();  // Read user's choice.

            switch (choice) {
                case 1:
                    // Option to add a parking spot.
                    System.out.print("Enter Spot ID: ");
                    int spotId = scanner.nextInt();
                    System.out.print("Enter Spot Type (compact, regular, large): ");
                    String spotType = scanner.next();
                    System.out.print("Enter Price per Hour: ");
                    double pricePerHour = scanner.nextDouble();
                    
                    // Create a new ParkingSpot and attempt to add it to the manager.
                    ParkingSpot newSpot = new ParkingSpot(spotId, spotType, pricePerHour);
                    Thread addSpotThread = new Thread(new AddParkingSpotTask(manager, newSpot));
                    addSpotThread.start();
                    addSpotThread.join();  // Ensure the spot is added before continuing.
                    break;
                    
                case 2:
                    // Option to park a vehicle.
                    System.out.print("Enter Spot ID to park: ");
                    int parkSpotId = scanner.nextInt();
                    System.out.print("Enter Vehicle License Plate: ");
                    String licensePlate = scanner.next();
                    System.out.print("Enter Vehicle Type (motorcycle, car, truck): ");
                    String vehicleType = scanner.next();
                    
                    // Find the spot by ID.
                    ParkingSpot parkSpot = null;
                    for (ParkingSpot spot : manager.spots) {
                        if (spot.getSpotId() == parkSpotId) {
                            parkSpot = spot;
                            break;
                        }
                    }
                    
                    if (parkSpot != null) {
                        Vehicle vehicle = new Vehicle(licensePlate, vehicleType);
                        Thread parkVehicleThread = new Thread(new ParkVehicleTask(manager, parkSpot, vehicle));
                        parkVehicleThread.start();
                        parkVehicleThread.join();  // Ensure the vehicle is parked before continuing.
                    } else {
                        System.out.println("Spot not found.");
                    }
                    break;
                    
                case 3:
                    // Option to remove a vehicle from a parking spot.
                    System.out.print("Enter Spot ID to remove vehicle: ");
                    int removeSpotId = scanner.nextInt();
                    
                    // Find the spot by ID.
                    ParkingSpot removeSpot = null;
                    for (ParkingSpot spot : manager.spots) {
                        if (spot.getSpotId() == removeSpotId) {
                            removeSpot = spot;
                            break;
                        }
                    }
                    
                    if (removeSpot != null) {
                        Thread removeVehicleThread = new Thread(new RemoveVehicleTask(manager, removeSpot));
                        removeVehicleThread.start();
                        removeVehicleThread.join();  // Ensure the vehicle is removed before continuing.
                    } else {
                        System.out.println("Spot not found.");
                    }
                    break;
                    
                case 4:
                    // Option to view available spots.
                    Thread viewAvailableSpotsThread = new Thread(new ViewAvailableSpotsTask(manager));
                    viewAvailableSpotsThread.start();
                    viewAvailableSpotsThread.join();  // Ensure it completes before continuing.
                    break;

                case 5:
                    // Option to calculate the parking fee.
                    System.out.print("Enter Spot ID to calculate fee: ");
                    int feeSpotId = scanner.nextInt();
                    System.out.print("Enter Number of Hours: ");
                    int hours = scanner.nextInt();
                    
                    // Find the spot by ID.
                    ParkingSpot feeSpot = null;
                    for (ParkingSpot spot : manager.spots) {
                        if (spot.getSpotId() == feeSpotId) {
                            feeSpot = spot;
                            break;
                        }
                    }
                    
                    if (feeSpot != null) {
                        double fee = manager.calculateParkingFee(feeSpot, hours);
                        if (fee > 0) {
                            System.out.println("The parking fee for " + hours + " hours is: $" + fee);
                        } else {
                            System.out.println("This spot is not currently occupied.");
                        }
                    } else {
                        System.out.println("Spot not found.");
                    }
                    break;

                case 6:
                    // Exit the program.
                    System.out.println("Exiting Parking Lot Management System.");
                    scanner.close();
                    System.exit(0);
                    break;

                default:
                    System.out.println("Invalid choice! Please select a valid option.");
            }
        }
    }
}





        

 import java.util.ArrayList;
import java.util.List;

public class ParkingLotManager {
    private List<ParkingSpot> spots;

    public ParkingLotManager() {
        spots = new ArrayList<>();
    }

    // Add a parking spot
    public synchronized void addParkingSpot(ParkingSpot spot) throws SpotAlreadyExistsException {
        for (ParkingSpot s : spots) {
            if (s.getSpotId() == spot.getSpotId()) {
                throw new SpotAlreadyExistsException("Spot with ID " + spot.getSpotId() + " already exists.");
            }
        }
        spots.add(spot);
    }

    // Park a vehicle
    public synchronized void parkVehicle(ParkingSpot spot, Vehicle vehicle) throws SpotUnavailableException {
        if (spot.isOccupied() || !isSpotSuitableForVehicle(spot, vehicle)) {
            throw new SpotUnavailableException("The spot is unavailable or not suitable for this vehicle.");
        }
        spot.occupySpot();
        System.out.println("Vehicle with license " + vehicle.getLicensePlate() + " parked at spot ID " + spot.getSpotId());
    }

    // Remove a vehicle
    public synchronized void removeVehicle(ParkingSpot spot) throws SpotNotOccupiedException {
        if (!spot.isOccupied()) {
            throw new SpotNotOccupiedException("Spot ID " + spot.getSpotId() + " is already empty.");
        }
        spot.vacateSpot();
        System.out.println("Spot ID " + spot.getSpotId() + " is now free.");
    }

    // View available spots
    public synchronized void viewAvailableSpots() {
        for (ParkingSpot spot : spots) {
            if (!spot.isOccupied()) {
                System.out.println(spot);
            }
        }
    }

    // Calculate parking fee
    public double calculateParkingFee(ParkingSpot spot, int hours) {
        if (!spot.isOccupied()) {
            return 0;
        }
        return spot.getPricePerHour() * hours;
    }

    // Check if a spot is suitable for a vehicle
    private boolean isSpotSuitableForVehicle(ParkingSpot spot, Vehicle vehicle) {
        // Example logic based on vehicle type:
        if (vehicle.getVehicleType().equals("motorcycle") && spot.getSpotType().equals("compact")) {
            return true;
        } else if (vehicle.getVehicleType().equals("car") && spot.getSpotType().equals("regular")) {
            return true;
        } else if (vehicle.getVehicleType().equals("truck") && spot.getSpotType().equals("large")) {
            return true;
        }
        return false;
    }
}







class AddParkingSpotTask implements Runnable {
    private ParkingLotManager manager;
    private ParkingSpot spot;

    public AddParkingSpotTask(ParkingLotManager manager, ParkingSpot spot) {
        this.manager = manager;
        this.spot = spot;
    }

    @Override
    public void run() {
        try {
            manager.addParkingSpot(spot);
        } catch (SpotAlreadyExistsException e) {
            System.out.println(e.getMessage());
        }
    }
}

class ParkVehicleTask implements Runnable {
    private ParkingLotManager manager;
    private ParkingSpot spot;
    private Vehicle vehicle;

    public ParkVehicleTask(ParkingLotManager manager, ParkingSpot spot, Vehicle vehicle) {
        this.manager = manager;
        this.spot = spot;
        this.vehicle = vehicle;
    }

    @Override
    public void run() {
        try {
            manager.parkVehicle(spot, vehicle);
        } catch (SpotUnavailableException e) {
            System.out.println(e.getMessage());
        }
    }
}

class RemoveVehicleTask implements Runnable {
    private ParkingLotManager manager;
    private ParkingSpot spot;

    public RemoveVehicleTask(ParkingLotManager manager, ParkingSpot spot) {
        this.manager = manager;
        this.spot = spot;
    }

    @Override
    public void run() {
        try {
            manager.removeVehicle(spot);
        } catch (SpotNotOccupiedException e) {
            System.out.println(e.getMessage());
        }
    }
}

class ViewAvailableSpotsTask implements Runnable {
    private ParkingLotManager manager;

    public ViewAvailableSpotsTask(ParkingLotManager manager) {
        this.manager = manager;
    }

    @Override
    public void run() {
        manager.viewAvailableSpots();
    }
}








public class Main {
    public static void main(String[] args) throws InterruptedException {
        ParkingLotManager manager = new ParkingLotManager();

        // Create parking spots
        ParkingSpot spot1 = new ParkingSpot(1, "compact", 5.0);
        ParkingSpot spot2 = new ParkingSpot(2, "regular", 10.0);
        ParkingSpot spot3 = new ParkingSpot(3, "large", 15.0);

        // Create vehicles
        Vehicle vehicle1 = new Vehicle("ABC123", "motorcycle");
        Vehicle vehicle2 = new Vehicle("XYZ789", "car");

        // Create threads for tasks
        Thread addSpotThread1 = new Thread(new AddParkingSpotTask(manager, spot1));
        Thread addSpotThread2 = new Thread(new AddParkingSpotTask(manager, spot2));
        Thread addSpotThread3 = new Thread(new AddParkingSpotTask(manager, spot3));

        Thread parkVehicleThread1 = new Thread(new ParkVehicleTask(manager, spot1, vehicle1));
        Thread parkVehicleThread2 = new Thread(new ParkVehicleTask(manager, spot2, vehicle2));

        Thread viewAvailableSpotsThread = new Thread(new ViewAvailableSpotsTask(manager));

        // Start all threads
        addSpotThread1.start();
        addSpotThread2.start();
        addSpotThread3.start();

        addSpotThread1.join();
        addSpotThread2.join();
        addSpotThread3.join();

        parkVehicleThread1.start();
        parkVehicleThread2.start();

        parkVehicleThread1.join();
        parkVehicleThread2.join();

        viewAvailableSpotsThread.start();
        viewAvailableSpotsThread.join();
    }
}
