
        

 import java.util.ArrayList;
import java.util.List;

public class ParkingLotManager {
    private List<ParkingSpot> spots;

    public ParkingLotManager() {
        spots = new ArrayList<>();
    }

    // Add a parking spot
    public synchronized void addParkingSpot(ParkingSpot spot) throws SpotAlreadyExistsException {
        for (ParkingSpot s : spots) {
            if (s.getSpotId() == spot.getSpotId()) {
                throw new SpotAlreadyExistsException("Spot with ID " + spot.getSpotId() + " already exists.");
            }
        }
        spots.add(spot);
    }

    // Park a vehicle
    public synchronized void parkVehicle(ParkingSpot spot, Vehicle vehicle) throws SpotUnavailableException {
        if (spot.isOccupied() || !isSpotSuitableForVehicle(spot, vehicle)) {
            throw new SpotUnavailableException("The spot is unavailable or not suitable for this vehicle.");
        }
        spot.occupySpot();
        System.out.println("Vehicle with license " + vehicle.getLicensePlate() + " parked at spot ID " + spot.getSpotId());
    }

    // Remove a vehicle
    public synchronized void removeVehicle(ParkingSpot spot) throws SpotNotOccupiedException {
        if (!spot.isOccupied()) {
            throw new SpotNotOccupiedException("Spot ID " + spot.getSpotId() + " is already empty.");
        }
        spot.vacateSpot();
        System.out.println("Spot ID " + spot.getSpotId() + " is now free.");
    }

    // View available spots
    public synchronized void viewAvailableSpots() {
        for (ParkingSpot spot : spots) {
            if (!spot.isOccupied()) {
                System.out.println(spot);
            }
        }
    }

    // Calculate parking fee
    public double calculateParkingFee(ParkingSpot spot, int hours) {
        if (!spot.isOccupied()) {
            return 0;
        }
        return spot.getPricePerHour() * hours;
    }

    // Check if a spot is suitable for a vehicle
    private boolean isSpotSuitableForVehicle(ParkingSpot spot, Vehicle vehicle) {
        // Example logic based on vehicle type:
        if (vehicle.getVehicleType().equals("motorcycle") && spot.getSpotType().equals("compact")) {
            return true;
        } else if (vehicle.getVehicleType().equals("car") && spot.getSpotType().equals("regular")) {
            return true;
        } else if (vehicle.getVehicleType().equals("truck") && spot.getSpotType().equals("large")) {
            return true;
        }
        return false;
    }
}







class AddParkingSpotTask implements Runnable {
    private ParkingLotManager manager;
    private ParkingSpot spot;

    public AddParkingSpotTask(ParkingLotManager manager, ParkingSpot spot) {
        this.manager = manager;
        this.spot = spot;
    }

    @Override
    public void run() {
        try {
            manager.addParkingSpot(spot);
        } catch (SpotAlreadyExistsException e) {
            System.out.println(e.getMessage());
        }
    }
}

class ParkVehicleTask implements Runnable {
    private ParkingLotManager manager;
    private ParkingSpot spot;
    private Vehicle vehicle;

    public ParkVehicleTask(ParkingLotManager manager, ParkingSpot spot, Vehicle vehicle) {
        this.manager = manager;
        this.spot = spot;
        this.vehicle = vehicle;
    }

    @Override
    public void run() {
        try {
            manager.parkVehicle(spot, vehicle);
        } catch (SpotUnavailableException e) {
            System.out.println(e.getMessage());
        }
    }
}

class RemoveVehicleTask implements Runnable {
    private ParkingLotManager manager;
    private ParkingSpot spot;

    public RemoveVehicleTask(ParkingLotManager manager, ParkingSpot spot) {
        this.manager = manager;
        this.spot = spot;
    }

    @Override
    public void run() {
        try {
            manager.removeVehicle(spot);
        } catch (SpotNotOccupiedException e) {
            System.out.println(e.getMessage());
        }
    }
}

class ViewAvailableSpotsTask implements Runnable {
    private ParkingLotManager manager;

    public ViewAvailableSpotsTask(ParkingLotManager manager) {
        this.manager = manager;
    }

    @Override
    public void run() {
        manager.viewAvailableSpots();
    }
}








public class Main {
    public static void main(String[] args) throws InterruptedException {
        ParkingLotManager manager = new ParkingLotManager();

        // Create parking spots
        ParkingSpot spot1 = new ParkingSpot(1, "compact", 5.0);
        ParkingSpot spot2 = new ParkingSpot(2, "regular", 10.0);
        ParkingSpot spot3 = new ParkingSpot(3, "large", 15.0);

        // Create vehicles
        Vehicle vehicle1 = new Vehicle("ABC123", "motorcycle");
        Vehicle vehicle2 = new Vehicle("XYZ789", "car");

        // Create threads for tasks
        Thread addSpotThread1 = new Thread(new AddParkingSpotTask(manager, spot1));
        Thread addSpotThread2 = new Thread(new AddParkingSpotTask(manager, spot2));
        Thread addSpotThread3 = new Thread(new AddParkingSpotTask(manager, spot3));

        Thread parkVehicleThread1 = new Thread(new ParkVehicleTask(manager, spot1, vehicle1));
        Thread parkVehicleThread2 = new Thread(new ParkVehicleTask(manager, spot2, vehicle2));

        Thread viewAvailableSpotsThread = new Thread(new ViewAvailableSpotsTask(manager));

        // Start all threads
        addSpotThread1.start();
        addSpotThread2.start();
        addSpotThread3.start();

        addSpotThread1.join();
        addSpotThread2.join();
        addSpotThread3.join();

        parkVehicleThread1.start();
        parkVehicleThread2.start();

        parkVehicleThread1.join();
        parkVehicleThread2.join();

        viewAvailableSpotsThread.start();
        viewAvailableSpotsThread.join();
    }
}
