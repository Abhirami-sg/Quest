import java.util.concurrent.*;
import java.util.concurrent.locks.Lock;
import java.util.concurrent.locks.ReentrantLock;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.ArrayList;
import java.util.List;

// Client Session using ThreadLocal
class ClientSession {
    private static final ThreadLocal<SessionData> sessionData = ThreadLocal.withInitial(SessionData::new);

    static class SessionData {
        String sessionId;
        String clientName;
        double accountBalance;

        SessionData() {
            // Generate random session data
            this.sessionId = "S" + Thread.currentThread().getId();
            this.clientName = "Client" + Thread.currentThread().getId();
            this.accountBalance = 10000.00; // Initial balance
        }
    }

    public static SessionData getSessionData() {
        return sessionData.get();
    }
}

// Platform Simulation Class
public class StockTradingPlatform {

    // ThreadGroups
    private final ThreadGroup buyOrdersGroup = new ThreadGroup("Buy Orders");
    private final ThreadGroup sellOrdersGroup = new ThreadGroup("Sell Orders");
    private final ThreadGroup marketAnalysisGroup = new ThreadGroup("Market Analysis");

    // Lock for shared resources
    private final Lock tradeLock = new ReentrantLock();
    private final Lock priceUpdateLock = new ReentrantLock();

    // Thread pool to manage requests
    private final ExecutorService tradePool = Executors.newFixedThreadPool(10);
    private final ForkJoinPool analyticsPool = new ForkJoinPool();

    // Shared data for price simulation
    private final ConcurrentHashMap<String, Double> stockPrices = new ConcurrentHashMap<>();
    private final AtomicBoolean haltSellOrders = new AtomicBoolean(false);

    public StockTradingPlatform() {
        // Initialize some stock prices
        stockPrices.put("AAPL", 150.0);
        stockPrices.put("GOOGL", 2800.0);
        stockPrices.put("AMZN", 3300.0);
    }

    // Task to handle Buy Orders
    private Runnable buyOrderTask = () -> {
        tradeLock.lock();
        try {
            // Simulate buy order processing
            ClientSession.SessionData sessionData = ClientSession.getSessionData();
            System.out.println(sessionData.clientName + " is buying stock.");
            // Update account balance, simulate stock price impact, etc.
            sessionData.accountBalance -= 100.0; // Dummy deduction
        } finally {
            tradeLock.unlock();
        }
    };

    // Task to handle Sell Orders
    private Runnable sellOrderTask = () -> {
        if (haltSellOrders.get()) {
            System.out.println("Sell Orders are halted due to market crash.");
            return;
        }
        tradeLock.lock();
        try {
            // Simulate sell order processing
            ClientSession.SessionData sessionData = ClientSession.getSessionData();
            System.out.println(sessionData.clientName + " is selling stock.");
            // Update account balance, simulate stock price impact, etc.
            sessionData.accountBalance += 100.0; // Dummy addition
        } finally {
            tradeLock.unlock();
        }
    };

    // Market Analysis using ForkJoin for large data processing
    private class MarketAnalysisTask extends RecursiveTask<Void> {
        private final List<String> stocks;

        public MarketAnalysisTask(List<String> stocks) {
            this.stocks = stocks;
        }

        @Override
        protected Void compute() {
            if (stocks.size() <= 1) {
                // Process single stock analysis
                String stock = stocks.get(0);
                System.out.println("Analyzing " + stock + " trend...");
                return null;
            } else {
                // Split task into smaller parts
                int mid = stocks.size() / 2;
                MarketAnalysisTask leftTask = new MarketAnalysisTask(stocks.subList(0, mid));
                MarketAnalysisTask rightTask = new MarketAnalysisTask(stocks.subList(mid, stocks.size()));

                leftTask.fork();
                rightTask.compute();
                leftTask.join();
            }
            return null;
        }
    }

    // Callable for asynchronous account balance check
    private Callable<Double> balanceCheckTask = () -> {
        ClientSession.SessionData sessionData = ClientSession.getSessionData();
        System.out.println("Checking balance for " + sessionData.clientName);
        return sessionData.accountBalance;
    };

    // Callable for asynchronous stock price retrieval
    private Callable<Double> stockPriceCheckTask(String stockSymbol) {
        return () -> {
            System.out.println("Checking price for stock: " + stockSymbol);
            return stockPrices.getOrDefault(stockSymbol, 0.0);
        };
    }

    // Simulation of the platform workflow
    public void runSimulation() throws InterruptedException, ExecutionException {
        // 1. Initialize ThreadPool and run tasks
        List<Future<Double>> futures = new ArrayList<>();
        for (int i = 0; i < 5; i++) {
            // Submit buy and sell orders
            tradePool.submit(new Thread(buyOrdersGroup, buyOrderTask));
            tradePool.submit(new Thread(sellOrdersGroup, sellOrderTask));

            // Submit balance check as Callable
            futures.add(tradePool.submit(balanceCheckTask));

            // Submit stock price check as Callable
            futures.add(tradePool.submit(stockPriceCheckTask("AAPL")));
        }

        // 2. Run Market Analysis using ForkJoin
        List<String> stockList = new ArrayList<>(stockPrices.keySet());
        MarketAnalysisTask analysisTask = new MarketAnalysisTask(stockList);
        analyticsPool.invoke(analysisTask);

        // 3. Collect Future results
        for (Future<Double> future : futures) {
            System.out.println("Result: " + future.get());
        }

        // 4. Terminate Sell Orders if market crashes
        if (marketCrash()) {
            haltSellOrders.set(true);
            sellOrdersGroup.interrupt();  // Terminate all sell threads in case of market crash
        }

        // 5. Shutdown pools after execution
        tradePool.shutdown();
        analyticsPool.shutdown();
    }

    // Dummy method to simulate market crash
    private boolean marketCrash() {
        return Math.random() < 0.1;  // 10% chance of crash
    }

    public static void main(String[] args) throws InterruptedException, ExecutionException {
        StockTradingPlatform platform = new StockTradingPlatform();
        platform.runSimulation();
    }
}
